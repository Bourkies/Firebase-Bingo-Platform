rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- NEW: Role-based helper functions ---
    function isAuth() {
      return request.auth != null;
    }
    function getUserData() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data;
    }
    function isAdmin() {
      // Use .get() for safety, matching the storage rule. This ensures it handles missing fields gracefully.
      return isAuth() && getUserData().get('isAdmin', false) == true;
    }
    function isEventMod() {
      return isAuth() && (getUserData().isEventMod == true || isAdmin());
    }
    function isCaptainOfTeam(teamName) {
      // A captain is defined by the captainId field in a document in the /teams collection.
      // Return false if teamId is null or not a string.
      return isAuth() && teamName != null && teamName is string &&
             get(/databases/$(database)/documents/teams/$(teamName)).data.captainId == request.auth.uid;
    }

    // Config and Tiles are publicly readable, but only Admins can modify them via the setup page.
    match /config/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /tiles/{tileId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // NEW: Teams are publicly readable, but only Admins can modify them.
    // This rule is required to create, update, or delete team documents from the setup page.
    match /teams/{teamId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // NEW: Styles are publicly readable, but only Admins can modify them.
    match /styles/{styleId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /submissions/{subId} {
      allow read: if true;

      // A logged-in user can create a submission, but only for their own team.
      allow create: if request.auth != null &&
                      getUserData().team == request.resource.data.Team;

      // An update is allowed if you are an Event Mod, OR
      // if you are on the submission's team AND you are not changing the team field.
      allow update: if isAuth() &&
                      ( isEventMod() ||
                        (getUserData().team == resource.data.Team &&
                         request.resource.data.Team == resource.data.Team) );

      allow delete: if isEventMod();
    }

    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth.uid == userId; // A user can create their own profile on first sign-in.

      // An Event Mod can update any user, but cannot grant Admin status.
      // An Admin can update any user with any field.
      // A Captain can only update the 'team' field of users.
      allow update: if isEventMod() && request.resource.data.isAdmin == resource.data.isAdmin ||
                      isAdmin() || (
                        // A captain can assign/unassign users from their own team.
                        (isCaptainOfTeam(resource.data.team) || isCaptainOfTeam(request.resource.data.team)) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['team'])
                      );
    }
  }
}